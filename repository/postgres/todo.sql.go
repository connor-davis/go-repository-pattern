// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: todo.sql

package postgres

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (title, description) VALUES ($1, $2) RETURNING id, title, description, completed
`

type CreateTodoParams struct {
	Title       string
	Description string
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, arg.Title, arg.Description)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
	)
	return i, err
}

const deleteTodoById = `-- name: DeleteTodoById :exec
DELETE FROM todos WHERE id = $1
`

func (q *Queries) DeleteTodoById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTodoById, id)
	return err
}

const getTodoById = `-- name: GetTodoById :one
SELECT id, title, description, completed FROM todos WHERE id = $1
`

func (q *Queries) GetTodoById(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodoById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, title, description, completed FROM todos
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoById = `-- name: UpdateTodoById :exec
UPDATE todos SET title = $1, description = $2, completed = $3 WHERE id = $4
`

type UpdateTodoByIdParams struct {
	Title       string
	Description string
	Completed   bool
	ID          int32
}

func (q *Queries) UpdateTodoById(ctx context.Context, arg UpdateTodoByIdParams) error {
	_, err := q.db.Exec(ctx, updateTodoById,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.ID,
	)
	return err
}
